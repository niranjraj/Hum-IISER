// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}
model User {
  id            String    @id @default(cuid())
  name          String?
  role          Role      @default(USER)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id            String    @id @default(cuid())
  location      String?
  userId       String  @unique
  user         User     @relation(fields: [userId], references: [id])
  phoneNumber   Int?      @db.SmallInt
  createdAt     DateTime   @default(now())
}

model Order {
  id           String    @id @default(cuid())
  active       Boolean   @default(false)
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  orderItem    OrderItem[]
  createdAt     DateTime   @default(now())
}

model OrderItem {
  id           String    @id @default(cuid())
  name          String?
  quantity      Int?
  orderId       String
  order         Order     @relation(fields: [orderId], references: [id])
  category     Category?

}
model Category {
  id           String    @id @default(cuid())
  name         String? @unique
  image        String?
  orderItemId       String  @unique
  orderItem         OrderItem     @relation(fields: [orderItemId], references: [id])   
}